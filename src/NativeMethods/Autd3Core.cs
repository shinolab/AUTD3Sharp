// <auto-generated>
// This code is generated by csbindgen.
// DON'T CHANGE THIS DIRECTLY.
// </auto-generated>
#pragma warning disable CS8500
#pragma warning disable CS8981
using System;
using System.Runtime.InteropServices;
using AUTD3Sharp.Utils;
using AUTD3Sharp.Link;


namespace AUTD3Sharp.NativeMethods
{
    internal static unsafe partial class NativeMethodsAutd3Core
    {
        const string __DllName = "autd3_core";

        /// <summary>
        ///  The absolute threshold of hearing in \[„é©\]
        /// </summary>
        internal const float ABSOLUTE_THRESHOLD_OF_HEARING = 0.00002f;
        internal const ushort SILENCER_STEPS_INTENSITY_DEFAULT = 10;
        internal const ushort SILENCER_STEPS_PHASE_DEFAULT = 40;
        internal const ushort INFINITE_REP = 65535;
        /// <summary>
        ///  PDO output frame size
        /// </summary>
        internal const nuint EC_OUTPUT_FRAME_SIZE = 626;
        /// <summary>
        ///  PDO input frame size
        /// </summary>
        internal const nuint EC_INPUT_FRAME_SIZE = 2;
        /// <summary>
        ///  The minimum buffer size of modulation.
        /// </summary>
        internal const nuint MOD_BUF_SIZE_MIN = 2;
        /// <summary>
        ///  The maximum buffer size of [`Modulation`].
        ///
        ///  [`Modulation`]: crate::modulation::Modulation
        /// </summary>
        internal const nuint MOD_BUF_SIZE_MAX = 65536;
        /// <summary>
        ///  The minimum buffer size of STM.
        /// </summary>
        internal const nuint STM_BUF_SIZE_MIN = 2;
        /// <summary>
        ///  The maximum buffer size of FociSTM.
        /// </summary>
        internal const nuint FOCI_STM_BUF_SIZE_MAX = 65536;
        /// <summary>
        ///  The maximum buffer size of GainSTM.
        /// </summary>
        internal const nuint GAIN_STM_BUF_SIZE_MAX = 1024;
        /// <summary>
        ///  The minimum number of foci per pattern in FociSTM.
        /// </summary>
        internal const nuint FOCI_STM_FOCI_NUM_MIN = 1;
        /// <summary>
        ///  The maximum number of foci per pattern in FociSTM.
        /// </summary>
        internal const nuint FOCI_STM_FOCI_NUM_MAX = 8;
        /// <summary>
        ///  The width of the fixed-point number used in the FociSTM.
        /// </summary>
        internal const nuint FOCI_STM_FIXED_NUM_WIDTH = 18;
        internal const int FOCI_STM_TR_X_MAX = 6908;
        internal const int FOCI_STM_TR_Y_MAX = 5283;
        /// <summary>
        ///  The ultrasound period count bits.
        /// </summary>
        internal const nuint ULTRASOUND_PERIOD_COUNT_BITS = 9;
        internal const nuint PWE_BUF_SIZE = 256;
        internal const byte TRANSITION_MODE_SYNC_IDX = 0;
        internal const byte TRANSITION_MODE_SYS_TIME = 1;
        internal const byte TRANSITION_MODE_GPIO = 2;
        internal const byte TRANSITION_MODE_EXT = 240;
        internal const byte TRANSITION_MODE_NONE = 254;
        internal const byte TRANSITION_MODE_IMMEDIATE = 255;
        internal const double EPSILON = 0.000001;





    }

    /// <summary>
    ///  Angle
    /// </summary>
    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct Angle
    {
        public float radian;
    }

    /// <summary>
    ///  A container for the phase and intensity of the ultrasound.
    /// </summary>
    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct Drive
    {
        /// <summary>
        ///  The phase of the ultrasound.
        /// </summary>
        public Phase phase;
        /// <summary>
        ///  The intensity of the ultrasound.
        /// </summary>
        public Intensity intensity;
    }

    /// <summary>
    ///  The intensity of the ultrasound.
    /// </summary>
    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct Intensity
    {
        public byte Item1;
    }

    /// <summary>
    ///  The phase of the ultrasound.
    /// </summary>
    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct Phase
    {
        public byte Item1;
    }

    /// <summary>
    ///  The pulse width.
    /// </summary>
    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PulseWidth
    {
        public ulong inner;
    }


    /// <summary>
    ///  GPIO output pin.
    /// </summary>
    internal enum GPIOOut : byte
    {
        /// <summary>
        ///  Output 0
        /// </summary>
        O0 = 0,
        /// <summary>
        ///  Output 1
        /// </summary>
        O1 = 1,
        /// <summary>
        ///  Output 2
        /// </summary>
        O2 = 2,
        /// <summary>
        ///  Output 3
        /// </summary>
        O3 = 3,
    }

    /// <summary>
    ///  GPIO input pin.
    /// </summary>
    internal enum GPIOIn : byte
    {
        /// <summary>
        ///  Input 0
        /// </summary>
        I0 = 0,
        /// <summary>
        ///  Input 1
        /// </summary>
        I1 = 1,
        /// <summary>
        ///  Input 2
        /// </summary>
        I2 = 2,
        /// <summary>
        ///  Input 3
        /// </summary>
        I3 = 3,
    }

    /// <summary>
    ///  Segment of the FPGA memory
    /// </summary>
    internal enum Segment : byte
    {
        /// <summary>
        ///  Segment 0
        /// </summary>
        S0 = 0,
        /// <summary>
        ///  Segment 1
        /// </summary>
        S1 = 1,
    }


}
