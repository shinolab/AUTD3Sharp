// <auto-generated>
// This code is generated by csbindgen.
// DON'T CHANGE THIS DIRECTLY.
// </auto-generated>
#pragma warning disable CS8500
#pragma warning disable CS8981
using System;
using System.Runtime.InteropServices;


namespace AUTD3Sharp.NativeMethods
{
    public static unsafe partial class NativeMethodsBase
    {
        const string __DllName = "autd3capi";



        [DllImport(__DllName, EntryPoint = "AUTDControllerBuilder", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ControllerBuilderPtr AUTDControllerBuilder(float* @params, ushort len);

        [DllImport(__DllName, EntryPoint = "AUTDControllerBuilderWithUltrasoundFreq", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ControllerBuilderPtr AUTDControllerBuilderWithUltrasoundFreq(ControllerBuilderPtr builder, uint ultrasound_freq);

        [DllImport(__DllName, EntryPoint = "AUTDControllerBuilderWithParallelThreshold", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ControllerBuilderPtr AUTDControllerBuilderWithParallelThreshold(ControllerBuilderPtr builder, ushort parallel_threshold);

        [DllImport(__DllName, EntryPoint = "AUTDControllerOpen", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ResultController AUTDControllerOpen(ControllerBuilderPtr builder, LinkBuilderPtr link_builder, long timeout_ns);

        [DllImport(__DllName, EntryPoint = "AUTDControllerGroup", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ResultI32 AUTDControllerGroup(ControllerPtr cnt, IntPtr f, ContextPtr context, GeometryPtr geometry, int* keys, DatagramPtr* d, ushort n);

        [DllImport(__DllName, EntryPoint = "AUTDControllerClose", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ResultI32 AUTDControllerClose(ControllerPtr cnt);

        [DllImport(__DllName, EntryPoint = "AUTDControllerDelete", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ResultI32 AUTDControllerDelete(ControllerPtr cnt);

        [DllImport(__DllName, EntryPoint = "AUTDControllerLastParallelThreshold", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ushort AUTDControllerLastParallelThreshold(ControllerPtr cnt);

        [DllImport(__DllName, EntryPoint = "AUTDControllerFPGAState", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ResultI32 AUTDControllerFPGAState(ControllerPtr cnt, int* @out);

        [DllImport(__DllName, EntryPoint = "AUTDControllerFirmwareVersionListPointer", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ResultFirmwareVersionList AUTDControllerFirmwareVersionListPointer(ControllerPtr cnt);

        [DllImport(__DllName, EntryPoint = "AUTDControllerFirmwareVersionGet", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void AUTDControllerFirmwareVersionGet(FirmwareVersionListPtr p_info_list, uint idx, byte* info);

        [DllImport(__DllName, EntryPoint = "AUTDControllerFirmwareVersionListPointerDelete", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void AUTDControllerFirmwareVersionListPointerDelete(FirmwareVersionListPtr p_info_list);

        [DllImport(__DllName, EntryPoint = "AUTDFirmwareLatest", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void AUTDFirmwareLatest(byte* latest);

        [DllImport(__DllName, EntryPoint = "AUTDControllerSend", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ResultI32 AUTDControllerSend(ControllerPtr cnt, DatagramPtr d);

        [DllImport(__DllName, EntryPoint = "AUTDDatagramClear", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern DatagramPtr AUTDDatagramClear();

        [DllImport(__DllName, EntryPoint = "AUTDDatagramDebugSettings", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern DatagramPtr AUTDDatagramDebugSettings(IntPtr f, ContextPtr context, GeometryPtr geometry);

        [DllImport(__DllName, EntryPoint = "AUTDDatagramForceFan", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern DatagramPtr AUTDDatagramForceFan(IntPtr f, ContextPtr context, GeometryPtr geometry);

        [DllImport(__DllName, EntryPoint = "AUTDDatagramTuple", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern DatagramPtr AUTDDatagramTuple(DatagramPtr d1, DatagramPtr d2);

        [DllImport(__DllName, EntryPoint = "AUTDDatagramPulseWidthEncoder", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern DatagramPtr AUTDDatagramPulseWidthEncoder(IntPtr f, ContextPtr context, GeometryPtr geometry);

        [DllImport(__DllName, EntryPoint = "AUTDDatagramPulseWidthEncoderDefault", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern DatagramPtr AUTDDatagramPulseWidthEncoderDefault();

        [DllImport(__DllName, EntryPoint = "AUTDDatagramReadsFPGAState", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern DatagramPtr AUTDDatagramReadsFPGAState(IntPtr f, ContextPtr context, GeometryPtr geometry);

        [DllImport(__DllName, EntryPoint = "AUTDDatagramSwapSegmentModulation", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern DatagramPtr AUTDDatagramSwapSegmentModulation(Segment segment, TransitionModeWrap transition_mode);

        [DllImport(__DllName, EntryPoint = "AUTDDatagramSwapSegmentFociSTM", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern DatagramPtr AUTDDatagramSwapSegmentFociSTM(Segment segment, TransitionModeWrap transition_mode);

        [DllImport(__DllName, EntryPoint = "AUTDDatagramSwapSegmentGainSTM", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern DatagramPtr AUTDDatagramSwapSegmentGainSTM(Segment segment, TransitionModeWrap transition_mode);

        [DllImport(__DllName, EntryPoint = "AUTDDatagramSwapSegmentGain", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern DatagramPtr AUTDDatagramSwapSegmentGain(Segment segment);

        [DllImport(__DllName, EntryPoint = "AUTDDatagramSilencerFixedUpdateRate", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern DatagramPtr AUTDDatagramSilencerFixedUpdateRate(ushort value_intensity, ushort value_phase);

        [DllImport(__DllName, EntryPoint = "AUTDDatagramSilencerFixedCompletionSteps", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern DatagramPtr AUTDDatagramSilencerFixedCompletionSteps(ushort value_intensity, ushort value_phase, [MarshalAs(UnmanagedType.U1)] bool strict_mode);

        [DllImport(__DllName, EntryPoint = "AUTDDatagramSilencerFixedCompletionStepsIsDefault", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        public static extern bool AUTDDatagramSilencerFixedCompletionStepsIsDefault(DatagramPtr silencer);

        [DllImport(__DllName, EntryPoint = "AUTDSTMFociFromFreq", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ResultFociSTM AUTDSTMFociFromFreq(float freq, float* points, byte* offsets, byte* intensities, ushort size, byte n);

        [DllImport(__DllName, EntryPoint = "AUTDSTMFociFromFreqNearest", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ResultFociSTM AUTDSTMFociFromFreqNearest(float freq, float* points, byte* offsets, byte* intensities, ushort size, byte n);

        [DllImport(__DllName, EntryPoint = "AUTDSTMFociFromSamplingConfig", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern FociSTMPtr AUTDSTMFociFromSamplingConfig(SamplingConfigWrap config, float* points, byte* offsets, byte* intensities, ushort size, byte n);

        [DllImport(__DllName, EntryPoint = "AUTDSTMFociWithLoopBehavior", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern FociSTMPtr AUTDSTMFociWithLoopBehavior(FociSTMPtr stm, byte n, LoopBehavior loop_behavior);

        [DllImport(__DllName, EntryPoint = "AUTDSTMFociIntoDatagramWithSegment", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern DatagramPtr AUTDSTMFociIntoDatagramWithSegment(FociSTMPtr stm, byte n, Segment segment);

        [DllImport(__DllName, EntryPoint = "AUTDSTMFociIntoDatagramWithSegmentTransition", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern DatagramPtr AUTDSTMFociIntoDatagramWithSegmentTransition(FociSTMPtr stm, byte n, Segment segment, TransitionModeWrap transition_mode);

        [DllImport(__DllName, EntryPoint = "AUTDSTMFociIntoDatagram", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern DatagramPtr AUTDSTMFociIntoDatagram(FociSTMPtr stm, byte n);

        [DllImport(__DllName, EntryPoint = "AUTDSTMGainFromFreq", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ResultGainSTM AUTDSTMGainFromFreq(float freq, GainPtr* gains, ushort size);

        [DllImport(__DllName, EntryPoint = "AUTDSTMGainFromFreqNearest", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ResultGainSTM AUTDSTMGainFromFreqNearest(float freq, GainPtr* gains, ushort size);

        [DllImport(__DllName, EntryPoint = "AUTDSTMGainFromSamplingConfig", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern GainSTMPtr AUTDSTMGainFromSamplingConfig(SamplingConfigWrap config, GainPtr* gains, ushort size);

        [DllImport(__DllName, EntryPoint = "AUTDSTMGainWithMode", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern GainSTMPtr AUTDSTMGainWithMode(GainSTMPtr stm, GainSTMMode mode);

        [DllImport(__DllName, EntryPoint = "AUTDSTMGainWithLoopBehavior", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern GainSTMPtr AUTDSTMGainWithLoopBehavior(GainSTMPtr stm, LoopBehavior loop_behavior);

        [DllImport(__DllName, EntryPoint = "AUTDSTMGainIntoDatagramWithSegment", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern DatagramPtr AUTDSTMGainIntoDatagramWithSegment(GainSTMPtr stm, Segment segment);

        [DllImport(__DllName, EntryPoint = "AUTDSTMGainIntoDatagramWithSegmentTransition", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern DatagramPtr AUTDSTMGainIntoDatagramWithSegmentTransition(GainSTMPtr stm, Segment segment, TransitionModeWrap transition_mode);

        [DllImport(__DllName, EntryPoint = "AUTDSTMGainIntoDatagram", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern DatagramPtr AUTDSTMGainIntoDatagram(GainSTMPtr stm);

        [DllImport(__DllName, EntryPoint = "AUTDDatagramSynchronize", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern DatagramPtr AUTDDatagramSynchronize();

        [DllImport(__DllName, EntryPoint = "AUTDDatagramWithParallelThreshold", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern DatagramPtr AUTDDatagramWithParallelThreshold(DatagramPtr d, ushort threshold);

        [DllImport(__DllName, EntryPoint = "AUTDDatagramWithTimeout", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern DatagramPtr AUTDDatagramWithTimeout(DatagramPtr d, ulong timeout_ns);

        [DllImport(__DllName, EntryPoint = "AUTDDcSysTimeNow", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ulong AUTDDcSysTimeNow();

        [DllImport(__DllName, EntryPoint = "AUTDDebugTypeNone", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern DebugTypeWrap AUTDDebugTypeNone();

        [DllImport(__DllName, EntryPoint = "AUTDDebugTypeBaseSignal", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern DebugTypeWrap AUTDDebugTypeBaseSignal();

        [DllImport(__DllName, EntryPoint = "AUTDDebugTypeThermo", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern DebugTypeWrap AUTDDebugTypeThermo();

        [DllImport(__DllName, EntryPoint = "AUTDDebugTypeForceFan", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern DebugTypeWrap AUTDDebugTypeForceFan();

        [DllImport(__DllName, EntryPoint = "AUTDDebugTypeSync", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern DebugTypeWrap AUTDDebugTypeSync();

        [DllImport(__DllName, EntryPoint = "AUTDDebugTypeModSegment", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern DebugTypeWrap AUTDDebugTypeModSegment();

        [DllImport(__DllName, EntryPoint = "AUTDDebugTypeModIdx", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern DebugTypeWrap AUTDDebugTypeModIdx(ushort value);

        [DllImport(__DllName, EntryPoint = "AUTDDebugTypeStmSegment", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern DebugTypeWrap AUTDDebugTypeStmSegment();

        [DllImport(__DllName, EntryPoint = "AUTDDebugTypeStmIdx", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern DebugTypeWrap AUTDDebugTypeStmIdx(ushort value);

        [DllImport(__DllName, EntryPoint = "AUTDDebugTypeIsStmMode", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern DebugTypeWrap AUTDDebugTypeIsStmMode();

        [DllImport(__DllName, EntryPoint = "AUTDDebugTypePwmOut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern DebugTypeWrap AUTDDebugTypePwmOut(TransducerPtr value);

        [DllImport(__DllName, EntryPoint = "AUTDDebugTypeDirect", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern DebugTypeWrap AUTDDebugTypeDirect([MarshalAs(UnmanagedType.U1)] bool value);

        [DllImport(__DllName, EntryPoint = "AUTDLoopBehaviorInfinite", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern LoopBehavior AUTDLoopBehaviorInfinite();

        [DllImport(__DllName, EntryPoint = "AUTDLoopBehaviorFinite", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern LoopBehavior AUTDLoopBehaviorFinite(uint v);

        [DllImport(__DllName, EntryPoint = "AUTDLoopBehaviorOnce", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern LoopBehavior AUTDLoopBehaviorOnce();

        [DllImport(__DllName, EntryPoint = "AUTDPhaseFromRad", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte AUTDPhaseFromRad(float value);

        [DllImport(__DllName, EntryPoint = "AUTDPhaseToRad", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern float AUTDPhaseToRad(byte value);

        [DllImport(__DllName, EntryPoint = "AUTDSamplingConfigFromDivision", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern SamplingConfigWrap AUTDSamplingConfigFromDivision(uint div);

        [DllImport(__DllName, EntryPoint = "AUTDSamplingConfigFromDivisionRaw", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern SamplingConfigWrap AUTDSamplingConfigFromDivisionRaw(uint div);

        [DllImport(__DllName, EntryPoint = "AUTDSamplingConfigFromFreq", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern SamplingConfigWrap AUTDSamplingConfigFromFreq(uint f);

        [DllImport(__DllName, EntryPoint = "AUTDSamplingConfigFromFreqNearest", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern SamplingConfigWrap AUTDSamplingConfigFromFreqNearest(float f);

        [DllImport(__DllName, EntryPoint = "AUTDTransitionModeSyncIdx", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern TransitionModeWrap AUTDTransitionModeSyncIdx();

        [DllImport(__DllName, EntryPoint = "AUTDTransitionModeSysTime", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern TransitionModeWrap AUTDTransitionModeSysTime(ulong sys_time);

        [DllImport(__DllName, EntryPoint = "AUTDTransitionModeGPIO", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern TransitionModeWrap AUTDTransitionModeGPIO(GPIOIn gpio);

        [DllImport(__DllName, EntryPoint = "AUTDTransitionModeExt", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern TransitionModeWrap AUTDTransitionModeExt();

        [DllImport(__DllName, EntryPoint = "AUTDTransitionModeImmediate", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern TransitionModeWrap AUTDTransitionModeImmediate();

        [DllImport(__DllName, EntryPoint = "AUTDGainBessel", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern GainPtr AUTDGainBessel(float x, float y, float z, float nx, float ny, float nz, float theta_z, byte intensity, byte phase_offset);

        [DllImport(__DllName, EntryPoint = "AUTDGainBesselIsDefault", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        public static extern bool AUTDGainBesselIsDefault(GainPtr bessel);

        [DllImport(__DllName, EntryPoint = "AUTDGainCustom", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern GainPtr AUTDGainCustom(IntPtr f, ContextPtr context, GeometryPtr geometry);

        [DllImport(__DllName, EntryPoint = "AUTDGainFocus", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern GainPtr AUTDGainFocus(float x, float y, float z, byte intensity, byte phase_offset);

        [DllImport(__DllName, EntryPoint = "AUTDGainFocusIsDefault", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        public static extern bool AUTDGainFocusIsDefault(GainPtr focus);

        [DllImport(__DllName, EntryPoint = "AUTDGainGroupCreateMap", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern GroupGainMapPtr AUTDGainGroupCreateMap(uint* device_indices_ptr, ushort num_devices);

        [DllImport(__DllName, EntryPoint = "AUTDGainGroupMapSet", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern GroupGainMapPtr AUTDGainGroupMapSet(GroupGainMapPtr map, ushort dev_idx, int* map_data);

        [DllImport(__DllName, EntryPoint = "AUTDGainGroup", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern GainPtr AUTDGainGroup(GroupGainMapPtr map, int* keys_ptr, GainPtr* values_ptr, uint kv_len);

        [DllImport(__DllName, EntryPoint = "AUTDGainIntoDatagramWithSegment", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern DatagramPtr AUTDGainIntoDatagramWithSegment(GainPtr gain, Segment segment, [MarshalAs(UnmanagedType.U1)] bool update_segment);

        [DllImport(__DllName, EntryPoint = "AUTDGainIntoDatagram", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern DatagramPtr AUTDGainIntoDatagram(GainPtr gain);

        [DllImport(__DllName, EntryPoint = "AUTDGainCalc", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ResultGainCalcDrivesMap AUTDGainCalc(GainPtr gain, GeometryPtr geometry);

        [DllImport(__DllName, EntryPoint = "AUTDGainCalcGetResult", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void AUTDGainCalcGetResult(GainCalcDrivesMapPtr src, Drive* dst, DevicePtr device);

        [DllImport(__DllName, EntryPoint = "AUTDGainCalcFreeResult", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void AUTDGainCalcFreeResult(GainCalcDrivesMapPtr src);

        [DllImport(__DllName, EntryPoint = "AUTDGainNull", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern GainPtr AUTDGainNull();

        [DllImport(__DllName, EntryPoint = "AUTDGainPlane", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern GainPtr AUTDGainPlane(float nx, float ny, float nz, byte intensity, byte phase_offset);

        [DllImport(__DllName, EntryPoint = "AUTDGainPlanelIsDefault", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        public static extern bool AUTDGainPlanelIsDefault(GainPtr plane);

        [DllImport(__DllName, EntryPoint = "AUTDGainRaw", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern GainPtr AUTDGainRaw();

        [DllImport(__DllName, EntryPoint = "AUTDGainRawSet", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern GainPtr AUTDGainRawSet(GainPtr custom, ushort dev_idx, Drive* ptr, byte len);

        [DllImport(__DllName, EntryPoint = "AUTDGainWithTransform", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern GainPtr AUTDGainWithTransform(GainPtr g, IntPtr f, ContextPtr context, GeometryPtr geometry);

        [DllImport(__DllName, EntryPoint = "AUTDGainUniform", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern GainPtr AUTDGainUniform(byte intensity, byte phase);

        [DllImport(__DllName, EntryPoint = "AUTDGainUniformIsDefault", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        public static extern bool AUTDGainUniformIsDefault(GainPtr uniform);

        [DllImport(__DllName, EntryPoint = "AUTDDevice", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern DevicePtr AUTDDevice(GeometryPtr geo, ushort dev_idx);

        [DllImport(__DllName, EntryPoint = "AUTDDeviceNumTransducers", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern uint AUTDDeviceNumTransducers(DevicePtr dev);

        [DllImport(__DllName, EntryPoint = "AUTDDeviceGetSoundSpeed", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern float AUTDDeviceGetSoundSpeed(DevicePtr dev);

        [DllImport(__DllName, EntryPoint = "AUTDDeviceSetSoundSpeed", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void AUTDDeviceSetSoundSpeed(DevicePtr dev, float value);

        [DllImport(__DllName, EntryPoint = "AUTDDeviceSetSoundSpeedFromTemp", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void AUTDDeviceSetSoundSpeedFromTemp(DevicePtr dev, float temp, float k, float r, float m);

        [DllImport(__DllName, EntryPoint = "AUTDDeviceCenter", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void AUTDDeviceCenter(DevicePtr dev, float* center);

        [DllImport(__DllName, EntryPoint = "AUTDDeviceTranslate", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void AUTDDeviceTranslate(DevicePtr dev, float x, float y, float z);

        [DllImport(__DllName, EntryPoint = "AUTDDeviceRotate", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void AUTDDeviceRotate(DevicePtr dev, float w, float i, float j, float k);

        [DllImport(__DllName, EntryPoint = "AUTDDeviceAffine", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void AUTDDeviceAffine(DevicePtr dev, float x, float y, float z, float w, float i, float j, float k);

        [DllImport(__DllName, EntryPoint = "AUTDDeviceEnableSet", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void AUTDDeviceEnableSet(DevicePtr dev, [MarshalAs(UnmanagedType.U1)] bool value);

        [DllImport(__DllName, EntryPoint = "AUTDDeviceEnableGet", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        public static extern bool AUTDDeviceEnableGet(DevicePtr dev);

        [DllImport(__DllName, EntryPoint = "AUTDDeviceWavelength", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern float AUTDDeviceWavelength(DevicePtr dev);

        [DllImport(__DllName, EntryPoint = "AUTDDeviceWavenumber", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern float AUTDDeviceWavenumber(DevicePtr dev);

        [DllImport(__DllName, EntryPoint = "AUTDDeviceRotation", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void AUTDDeviceRotation(DevicePtr dev, float* rot);

        [DllImport(__DllName, EntryPoint = "AUTDDeviceDirectionX", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void AUTDDeviceDirectionX(DevicePtr dev, float* dir);

        [DllImport(__DllName, EntryPoint = "AUTDDeviceDirectionY", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void AUTDDeviceDirectionY(DevicePtr dev, float* dir);

        [DllImport(__DllName, EntryPoint = "AUTDDeviceDirectionAxial", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void AUTDDeviceDirectionAxial(DevicePtr dev, float* dir);

        [DllImport(__DllName, EntryPoint = "AUTDGeometry", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern GeometryPtr AUTDGeometry(ControllerPtr cnt);

        [DllImport(__DllName, EntryPoint = "AUTDGeometryNumDevices", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern uint AUTDGeometryNumDevices(GeometryPtr geo);

        [DllImport(__DllName, EntryPoint = "AUTDRotationFromEulerZYZ", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void AUTDRotationFromEulerZYZ(float x, float y, float z, float* rot);

        [DllImport(__DllName, EntryPoint = "AUTDTransducer", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern TransducerPtr AUTDTransducer(DevicePtr dev, byte idx);

        [DllImport(__DllName, EntryPoint = "AUTDTransducerPosition", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void AUTDTransducerPosition(TransducerPtr tr, float* pos);

        [DllImport(__DllName, EntryPoint = "AUTDLinkAudit", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern LinkAuditBuilderPtr AUTDLinkAudit();

        [DllImport(__DllName, EntryPoint = "AUTDLinkAuditWithTimeout", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern LinkAuditBuilderPtr AUTDLinkAuditWithTimeout(LinkAuditBuilderPtr audit, ulong timeout_ns);

        [DllImport(__DllName, EntryPoint = "AUTDLinkAuditIntoBuilder", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern LinkBuilderPtr AUTDLinkAuditIntoBuilder(LinkAuditBuilderPtr audit);

        [DllImport(__DllName, EntryPoint = "AUTDLinkAuditIsOpen", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        public static extern bool AUTDLinkAuditIsOpen(LinkPtr audit);

        [DllImport(__DllName, EntryPoint = "AUTDLinkAuditTimeoutNs", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ulong AUTDLinkAuditTimeoutNs(LinkPtr audit);

        [DllImport(__DllName, EntryPoint = "AUTDLinkAuditLastTimeoutNs", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern long AUTDLinkAuditLastTimeoutNs(LinkPtr audit);

        [DllImport(__DllName, EntryPoint = "AUTDLinkAuditDown", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void AUTDLinkAuditDown(LinkPtr audit);

        [DllImport(__DllName, EntryPoint = "AUTDLinkAuditBreakDown", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void AUTDLinkAuditBreakDown(LinkPtr audit);

        [DllImport(__DllName, EntryPoint = "AUTDLinkAuditCpuNumTransducers", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern uint AUTDLinkAuditCpuNumTransducers(LinkPtr audit, ushort idx);

        [DllImport(__DllName, EntryPoint = "AUTDLinkAuditFpgaAssertThermalSensor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void AUTDLinkAuditFpgaAssertThermalSensor(LinkPtr audit, ushort idx);

        [DllImport(__DllName, EntryPoint = "AUTDLinkAuditFpgaDeassertThermalSensor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void AUTDLinkAuditFpgaDeassertThermalSensor(LinkPtr audit, ushort idx);

        [DllImport(__DllName, EntryPoint = "AUTDLinkAuditFpgaIsForceFan", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        public static extern bool AUTDLinkAuditFpgaIsForceFan(LinkPtr audit, ushort idx);

        [DllImport(__DllName, EntryPoint = "AUTDLinkAuditFpgaCurrentStmSegment", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern Segment AUTDLinkAuditFpgaCurrentStmSegment(LinkPtr audit, ushort idx);

        [DllImport(__DllName, EntryPoint = "AUTDLinkAuditFpgaCurrentModSegment", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern Segment AUTDLinkAuditFpgaCurrentModSegment(LinkPtr audit, ushort idx);

        [DllImport(__DllName, EntryPoint = "AUTDLinkAuditFpgaIsStmGainMode", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        public static extern bool AUTDLinkAuditFpgaIsStmGainMode(LinkPtr audit, Segment segment, ushort idx);

        [DllImport(__DllName, EntryPoint = "AUTDLinkAuditFpgaSilencerUpdateRateIntensity", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ushort AUTDLinkAuditFpgaSilencerUpdateRateIntensity(LinkPtr audit, ushort idx);

        [DllImport(__DllName, EntryPoint = "AUTDLinkAuditFpgaSilencerUpdateRatePhase", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ushort AUTDLinkAuditFpgaSilencerUpdateRatePhase(LinkPtr audit, ushort idx);

        [DllImport(__DllName, EntryPoint = "AUTDLinkAuditFpgaSilencerCompletionStepsIntensity", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ushort AUTDLinkAuditFpgaSilencerCompletionStepsIntensity(LinkPtr audit, ushort idx);

        [DllImport(__DllName, EntryPoint = "AUTDLinkAuditFpgaSilencerCompletionStepsPhase", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ushort AUTDLinkAuditFpgaSilencerCompletionStepsPhase(LinkPtr audit, ushort idx);

        [DllImport(__DllName, EntryPoint = "AUTDLinkAuditFpgaSilencerFixedCompletionStepsMode", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        public static extern bool AUTDLinkAuditFpgaSilencerFixedCompletionStepsMode(LinkPtr audit, ushort idx);

        [DllImport(__DllName, EntryPoint = "AUTDLinkAuditFpgaDebugTypes", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void AUTDLinkAuditFpgaDebugTypes(LinkPtr audit, ushort idx, byte* ty);

        [DllImport(__DllName, EntryPoint = "AUTDLinkAuditFpgaDebugValues", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void AUTDLinkAuditFpgaDebugValues(LinkPtr audit, ushort idx, ushort* value);

        [DllImport(__DllName, EntryPoint = "AUTDLinkAuditFpgaStmFreqDivision", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern uint AUTDLinkAuditFpgaStmFreqDivision(LinkPtr audit, Segment segment, ushort idx);

        [DllImport(__DllName, EntryPoint = "AUTDLinkAuditFpgaStmCycle", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ushort AUTDLinkAuditFpgaStmCycle(LinkPtr audit, Segment segment, ushort idx);

        [DllImport(__DllName, EntryPoint = "AUTDLinkAuditFpgaSoundSpeed", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ushort AUTDLinkAuditFpgaSoundSpeed(LinkPtr audit, Segment segment, ushort idx);

        [DllImport(__DllName, EntryPoint = "AUTDLinkAuditFpgaStmLoopBehavior", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern LoopBehavior AUTDLinkAuditFpgaStmLoopBehavior(LinkPtr audit, Segment segment, ushort idx);

        [DllImport(__DllName, EntryPoint = "AUTDLinkAuditFpgaModulationFreqDivision", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern uint AUTDLinkAuditFpgaModulationFreqDivision(LinkPtr audit, Segment segment, ushort idx);

        [DllImport(__DllName, EntryPoint = "AUTDLinkAuditFpgaModulationCycle", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ushort AUTDLinkAuditFpgaModulationCycle(LinkPtr audit, Segment segment, ushort idx);

        [DllImport(__DllName, EntryPoint = "AUTDLinkAuditFpgaModulation", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void AUTDLinkAuditFpgaModulation(LinkPtr audit, Segment segment, ushort idx, byte* data);

        [DllImport(__DllName, EntryPoint = "AUTDLinkAuditFpgaModulationLoopBehavior", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern LoopBehavior AUTDLinkAuditFpgaModulationLoopBehavior(LinkPtr audit, Segment segment, ushort idx);

        [DllImport(__DllName, EntryPoint = "AUTDLinkAuditFpgaDrives", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void AUTDLinkAuditFpgaDrives(LinkPtr audit, Segment segment, ushort idx, ushort stm_idx, byte* intensities, byte* phases);

        [DllImport(__DllName, EntryPoint = "AUTDLinkAuditFpgaPulseWidthEncoderTable", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ushort AUTDLinkAuditFpgaPulseWidthEncoderTable(LinkPtr audit, ushort idx, byte* dst);

        [DllImport(__DllName, EntryPoint = "AUTDLinkAuditFpgaUltrasoundFreq", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern uint AUTDLinkAuditFpgaUltrasoundFreq(LinkPtr audit, ushort idx);

        [DllImport(__DllName, EntryPoint = "AUTDLinkGet", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern LinkPtr AUTDLinkGet(ControllerPtr cnt);

        [DllImport(__DllName, EntryPoint = "AUTDLinkNop", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern LinkBuilderPtr AUTDLinkNop();

        [DllImport(__DllName, EntryPoint = "AUTDModulationFourierExact", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ResultModulation AUTDModulationFourierExact(ModulationPtr* components, uint size, LoopBehavior loop_behavior);

        [DllImport(__DllName, EntryPoint = "AUTDModulationFourierExactFloat", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ResultModulation AUTDModulationFourierExactFloat(ModulationPtr* components, uint size, LoopBehavior loop_behavior);

        [DllImport(__DllName, EntryPoint = "AUTDModulationFourierNearest", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ResultModulation AUTDModulationFourierNearest(ModulationPtr* components, uint size, LoopBehavior loop_behavior);

        [DllImport(__DllName, EntryPoint = "AUTDModulationMixerExact", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ResultModulation AUTDModulationMixerExact(ModulationPtr* components, uint size, LoopBehavior loop_behavior);

        [DllImport(__DllName, EntryPoint = "AUTDModulationMixerExactFloat", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ResultModulation AUTDModulationMixerExactFloat(ModulationPtr* components, uint size, LoopBehavior loop_behavior);

        [DllImport(__DllName, EntryPoint = "AUTDModulationMixerNearest", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ResultModulation AUTDModulationMixerNearest(ModulationPtr* components, uint size, LoopBehavior loop_behavior);

        [DllImport(__DllName, EntryPoint = "AUTDModulationIntoDatagramWithSegment", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern DatagramPtr AUTDModulationIntoDatagramWithSegment(ModulationPtr m, Segment segment);

        [DllImport(__DllName, EntryPoint = "AUTDModulationIntoDatagramWithSegmentTransition", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern DatagramPtr AUTDModulationIntoDatagramWithSegmentTransition(ModulationPtr m, Segment segment, TransitionModeWrap transition_mode);

        [DllImport(__DllName, EntryPoint = "AUTDModulationIntoDatagram", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern DatagramPtr AUTDModulationIntoDatagram(ModulationPtr m);

        [DllImport(__DllName, EntryPoint = "AUTDModulationCalc", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ResultModulationCalc AUTDModulationCalc(ModulationPtr m, GeometryPtr geometry);

        [DllImport(__DllName, EntryPoint = "AUTDModulationCalcGetResult", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void AUTDModulationCalcGetResult(ModulationCalcPtr src, byte* dst);

        [DllImport(__DllName, EntryPoint = "AUTDModulationCalcGetSize", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ushort AUTDModulationCalcGetSize(ModulationCalcPtr src);

        [DllImport(__DllName, EntryPoint = "AUTDModulationCalcFreeResult", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void AUTDModulationCalcFreeResult(ModulationCalcPtr src);

        [DllImport(__DllName, EntryPoint = "AUTDModulationWithRadiationPressure", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ModulationPtr AUTDModulationWithRadiationPressure(ModulationPtr m, LoopBehavior loop_behavior);

        [DllImport(__DllName, EntryPoint = "AUTDModulationRaw", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ModulationPtr AUTDModulationRaw(SamplingConfigWrap config, LoopBehavior loop_behavior, byte* ptr, ushort len);

        [DllImport(__DllName, EntryPoint = "AUTDModulationSineExact", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ModulationPtr AUTDModulationSineExact(uint freq, SamplingConfigWrap config, byte intensity, byte offset, float phase, LoopBehavior loop_behavior);

        [DllImport(__DllName, EntryPoint = "AUTDModulationSineExactFloat", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ModulationPtr AUTDModulationSineExactFloat(float freq, SamplingConfigWrap config, byte intensity, byte offset, float phase, LoopBehavior loop_behavior);

        [DllImport(__DllName, EntryPoint = "AUTDModulationSineNearest", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ModulationPtr AUTDModulationSineNearest(float freq, SamplingConfigWrap config, byte intensity, byte offset, float phase, LoopBehavior loop_behavior);

        [DllImport(__DllName, EntryPoint = "AUTDModulationSineIsDefault", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        public static extern bool AUTDModulationSineIsDefault(ModulationPtr sine);

        [DllImport(__DllName, EntryPoint = "AUTDModulationSquareExact", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ModulationPtr AUTDModulationSquareExact(uint freq, SamplingConfigWrap config, byte low, byte high, float duty, LoopBehavior loop_behavior);

        [DllImport(__DllName, EntryPoint = "AUTDModulationSquareExactFloat", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ModulationPtr AUTDModulationSquareExactFloat(float freq, SamplingConfigWrap config, byte low, byte high, float duty, LoopBehavior loop_behavior);

        [DllImport(__DllName, EntryPoint = "AUTDModulationSquareNearest", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ModulationPtr AUTDModulationSquareNearest(float freq, SamplingConfigWrap config, byte low, byte high, float duty, LoopBehavior loop_behavior);

        [DllImport(__DllName, EntryPoint = "AUTDModulationSquareIsDefault", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        public static extern bool AUTDModulationSquareIsDefault(ModulationPtr square);

        [DllImport(__DllName, EntryPoint = "AUTDModulationStatic", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ModulationPtr AUTDModulationStatic(byte intensity, LoopBehavior loop_behavior);

        [DllImport(__DllName, EntryPoint = "AUTDModulationStaticIsDefault", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        public static extern bool AUTDModulationStaticIsDefault(ModulationPtr s);

        [DllImport(__DllName, EntryPoint = "AUTDModulationWithTransform", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ModulationPtr AUTDModulationWithTransform(ModulationPtr m, IntPtr f, IntPtr context, LoopBehavior loop_behavior);

        [DllImport(__DllName, EntryPoint = "AUTDGetErr", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void AUTDGetErr(IntPtr src, byte* dst);


    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct ControllerBuilderPtr
    {
        public IntPtr Item1;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct ControllerPtr
    {
        public IntPtr Item1;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct ResultController
    {
        public ControllerPtr result;
        public uint err_len;
        public IntPtr err;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct FirmwareVersionListPtr
    {
        public IntPtr Item1;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct ResultFirmwareVersionList
    {
        public FirmwareVersionListPtr result;
        public uint err_len;
        public IntPtr err;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct GroupGainMapPtr
    {
        public IntPtr Item1;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct GainCalcDrivesMapPtr
    {
        public IntPtr Item1;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct ResultGainCalcDrivesMap
    {
        public GainCalcDrivesMapPtr result;
        public uint err_len;
        public IntPtr err;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct LinkAuditBuilderPtr
    {
        public IntPtr Item1;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct ModulationCalcPtr
    {
        public IntPtr Item1;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct ResultModulationCalc
    {
        public ModulationCalcPtr result;
        public SamplingConfigWrap config;
        public uint err_len;
        public IntPtr err;
    }



}
