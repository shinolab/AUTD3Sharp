// <auto-generated>
// This code is generated by csbindgen.
// DON'T CHANGE THIS DIRECTLY.
// </auto-generated>
#pragma warning disable CS8500
#pragma warning disable CS8981
using System;
using System.Runtime.InteropServices;
using AUTD3Sharp.Utils;
using AUTD3Sharp.Link;


namespace AUTD3Sharp.NativeMethods
{
    internal static unsafe partial class NativeMethodsLinkEthercrab
    {
        const string __DllName = "autd3capi_link_ethercrab";



        [DllImport(__DllName, EntryPoint = "AUTDLinkEtherCrabTracingInit", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void AUTDLinkEtherCrabTracingInit();

        [DllImport(__DllName, EntryPoint = "AUTDLinkEtherCrabTracingInitWithFile", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern ResultStatus AUTDLinkEtherCrabTracingInitWithFile(byte* path);

        [DllImport(__DllName, EntryPoint = "AUTDLinkEtherCrab", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern ResultLink AUTDLinkEtherCrab(ConstPtr err_handler, ConstPtr err_context, EtherCrabOption option);

        [DllImport(__DllName, EntryPoint = "AUTDLinkEtherCrabIsDefault", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool AUTDLinkEtherCrabIsDefault(EtherCrabOption option);

        [DllImport(__DllName, EntryPoint = "AUTDLinkEtherCrabStatusGetMsg", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint AUTDLinkEtherCrabStatusGetMsg(Status src, byte* dst);

        [DllImport(__DllName, EntryPoint = "AUTDLinkEtherCrabThreadPriorityMin", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern ThreadPriorityPtr AUTDLinkEtherCrabThreadPriorityMin();

        [DllImport(__DllName, EntryPoint = "AUTDLinkEtherCrabThreadPriorityCrossplatform", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern ThreadPriorityPtr AUTDLinkEtherCrabThreadPriorityCrossplatform(byte value);

        [DllImport(__DllName, EntryPoint = "AUTDLinkEtherCrabThreadPriorityMax", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern ThreadPriorityPtr AUTDLinkEtherCrabThreadPriorityMax();


    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct EtherCrabOption
    {
        public byte* ifname;
        public uint buf_size;
        public Duration timeouts_state_transition;
        public Duration timeouts_pdu;
        public Duration timeouts_eeprom;
        public Duration timeouts_wait_loop_delay;
        public Duration timeouts_mailbox_echo;
        public Duration timeouts_mailbox_response;
        public uint main_device_config_dc_static_sync_iterations;
        public ulong main_device_config_retry_behaviour;
        public Duration dc_configuration_start_delay;
        public Duration dc_configuration_sync0_period;
        public Duration dc_configuration_sync0_shift;
        public Duration state_check_period;
        public Duration sync_tolerance;
        public Duration sync_timeout;
        public ThreadPriorityPtr tx_rx_thread_builder;
        public int tx_rx_thread_affinity;
        public ThreadPriorityPtr main_thread_builder;
        public int main_thread_affinity;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct ThreadPriorityPtr
    {
        public IntPtr Item1;
    }



}
