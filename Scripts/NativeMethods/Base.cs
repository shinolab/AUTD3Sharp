// <auto-generated>
// This code is generated by csbindgen.
// DON'T CHANGE THIS DIRECTLY.
// </auto-generated>
#pragma warning disable CS8500
#pragma warning disable CS8981
using System;
using System.Runtime.InteropServices;
using AUTD3Sharp.Utils;
using AUTD3Sharp.Link;


namespace AUTD3Sharp.NativeMethods
{
    internal static unsafe partial class NativeMethodsBase
    {
        const string __DllName = "autd3capi";



        [DllImport(__DllName, EntryPoint = "AUTDControllerGroup", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern ResultStatus AUTDControllerGroup(SenderPtr sender, ConstPtr f, ConstPtr context, GeometryPtr geometry, int* keys, DatagramPtr* d, ushort n);

        [DllImport(__DllName, EntryPoint = "AUTDControllerOpen", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern ResultController AUTDControllerOpen(Point3* pos, Quaternion* rot, ushort len, LinkPtr link, SenderOption option);

        [DllImport(__DllName, EntryPoint = "AUTDControllerClose", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern ResultStatus AUTDControllerClose(ControllerPtr cnt);

        [DllImport(__DllName, EntryPoint = "AUTDControllerFPGAState", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern ResultFPGAStateList AUTDControllerFPGAState(ControllerPtr cnt);

        [DllImport(__DllName, EntryPoint = "AUTDControllerFPGAStateGet", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern short AUTDControllerFPGAStateGet(FPGAStateListPtr p, uint idx);

        [DllImport(__DllName, EntryPoint = "AUTDControllerFPGAStateDelete", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void AUTDControllerFPGAStateDelete(FPGAStateListPtr p);

        [DllImport(__DllName, EntryPoint = "AUTDControllerFirmwareVersionListPointer", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern ResultFirmwareVersionList AUTDControllerFirmwareVersionListPointer(ControllerPtr cnt);

        [DllImport(__DllName, EntryPoint = "AUTDControllerFirmwareVersionGet", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void AUTDControllerFirmwareVersionGet(FirmwareVersionListPtr p_info_list, uint idx, byte* info);

        [DllImport(__DllName, EntryPoint = "AUTDControllerFirmwareVersionListPointerDelete", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void AUTDControllerFirmwareVersionListPointerDelete(FirmwareVersionListPtr p_info_list);

        [DllImport(__DllName, EntryPoint = "AUTDFirmwareLatest", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void AUTDFirmwareLatest(byte* latest);

        [DllImport(__DllName, EntryPoint = "AUTDSender", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern SenderPtr AUTDSender(ControllerPtr cnt, SenderOption option);

        [DllImport(__DllName, EntryPoint = "AUTDSenderSend", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern ResultStatus AUTDSenderSend(SenderPtr sender, DatagramPtr d);

        [DllImport(__DllName, EntryPoint = "AUTDSpinSleepDefaultAccuracy", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint AUTDSpinSleepDefaultAccuracy();

        [DllImport(__DllName, EntryPoint = "AUTDSenderOptionIsDefault", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool AUTDSenderOptionIsDefault(SenderOption option);

        [DllImport(__DllName, EntryPoint = "AUTDDatagramClear", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern DatagramPtr AUTDDatagramClear();

        [DllImport(__DllName, EntryPoint = "AUTDDatagramGPIOOutputs", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern DatagramPtr AUTDDatagramGPIOOutputs(ConstPtr f, ConstPtr context, GeometryPtr geometry);

        [DllImport(__DllName, EntryPoint = "AUTDDatagramForceFan", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern DatagramPtr AUTDDatagramForceFan(ConstPtr f, ConstPtr context, GeometryPtr geometry);

        [DllImport(__DllName, EntryPoint = "AUTDDatagramTuple", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern DatagramPtr AUTDDatagramTuple(DatagramPtr d1, DatagramPtr d2);

        [DllImport(__DllName, EntryPoint = "AUTDDatagramPhaseCorr", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern DatagramPtr AUTDDatagramPhaseCorr(ConstPtr f, ConstPtr context, GeometryPtr geometry);

        [DllImport(__DllName, EntryPoint = "AUTDDatagramPulseWidthEncoder", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern DatagramPtr AUTDDatagramPulseWidthEncoder(ConstPtr f, ConstPtr context, GeometryPtr geometry);

        [DllImport(__DllName, EntryPoint = "AUTDDatagramPulseWidthEncoderDefault", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern DatagramPtr AUTDDatagramPulseWidthEncoderDefault();

        [DllImport(__DllName, EntryPoint = "AUTDDatagramReadsFPGAState", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern DatagramPtr AUTDDatagramReadsFPGAState(ConstPtr f, ConstPtr context, GeometryPtr geometry);

        [DllImport(__DllName, EntryPoint = "AUTDDatagramSwapSegmentModulation", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern DatagramPtr AUTDDatagramSwapSegmentModulation(Segment segment, TransitionModeWrap transition_mode);

        [DllImport(__DllName, EntryPoint = "AUTDDatagramSwapSegmentFociSTM", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern DatagramPtr AUTDDatagramSwapSegmentFociSTM(Segment segment, TransitionModeWrap transition_mode);

        [DllImport(__DllName, EntryPoint = "AUTDDatagramSwapSegmentGainSTM", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern DatagramPtr AUTDDatagramSwapSegmentGainSTM(Segment segment, TransitionModeWrap transition_mode);

        [DllImport(__DllName, EntryPoint = "AUTDDatagramSwapSegmentGain", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern DatagramPtr AUTDDatagramSwapSegmentGain(Segment segment, TransitionModeWrap transition_mode);

        [DllImport(__DllName, EntryPoint = "AUTDDatagramSilencerFromUpdateRate", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern DatagramPtr AUTDDatagramSilencerFromUpdateRate(FixedUpdateRate config);

        [DllImport(__DllName, EntryPoint = "AUTDDatagramSilencerFromCompletionSteps", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern DatagramPtr AUTDDatagramSilencerFromCompletionSteps(FixedCompletionSteps config);

        [DllImport(__DllName, EntryPoint = "AUTDDatagramSilencerFromCompletionTime", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern DatagramPtr AUTDDatagramSilencerFromCompletionTime(FixedCompletionTime config);

        [DllImport(__DllName, EntryPoint = "AUTDDatagramSilencerFixedCompletionStepsIsDefault", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool AUTDDatagramSilencerFixedCompletionStepsIsDefault(FixedCompletionSteps config);

        [DllImport(__DllName, EntryPoint = "AUTDSTMFoci", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern FociSTMPtr AUTDSTMFoci(SamplingConfigWrap config, ConstPtr points, ushort size, byte n);

        [DllImport(__DllName, EntryPoint = "AUTDSTMFociIntoDatagramWithSegment", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern DatagramPtr AUTDSTMFociIntoDatagramWithSegment(FociSTMPtr stm, byte n, Segment segment, TransitionModeWrap transition_mode);

        [DllImport(__DllName, EntryPoint = "AUTDSTMFociIntoDatagramWithLoopBehavior", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern DatagramPtr AUTDSTMFociIntoDatagramWithLoopBehavior(FociSTMPtr stm, byte n, Segment segment, TransitionModeWrap transition_mode, LoopBehavior loop_behavior);

        [DllImport(__DllName, EntryPoint = "AUTDSTMFociIntoDatagram", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern DatagramPtr AUTDSTMFociIntoDatagram(FociSTMPtr stm, byte n);

        [DllImport(__DllName, EntryPoint = "AUTDSTMGain", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern GainSTMPtr AUTDSTMGain(SamplingConfigWrap config, GainPtr* gains, ushort size, GainSTMOption option);

        [DllImport(__DllName, EntryPoint = "AUTDSTMGainIntoDatagramWithSegment", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern DatagramPtr AUTDSTMGainIntoDatagramWithSegment(GainSTMPtr stm, Segment segment, TransitionModeWrap transition_mode);

        [DllImport(__DllName, EntryPoint = "AUTDSTMGainIntoDatagramWithLoopBehavior", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern DatagramPtr AUTDSTMGainIntoDatagramWithLoopBehavior(GainSTMPtr stm, Segment segment, TransitionModeWrap transition_mode, LoopBehavior loop_behavior);

        [DllImport(__DllName, EntryPoint = "AUTDSTMGainIntoDatagram", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern DatagramPtr AUTDSTMGainIntoDatagram(GainSTMPtr stm);

        [DllImport(__DllName, EntryPoint = "AUTDSTMConfigFromFreq", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern ResultSamplingConfig AUTDSTMConfigFromFreq(float f, ushort n);

        [DllImport(__DllName, EntryPoint = "AUTDSTMConfigFromPeriod", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern ResultSamplingConfig AUTDSTMConfigFromPeriod(Duration p, ushort n);

        [DllImport(__DllName, EntryPoint = "AUTDSTMConfigFromFreqNearest", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern SamplingConfigWrap AUTDSTMConfigFromFreqNearest(float f, ushort n);

        [DllImport(__DllName, EntryPoint = "AUTDSTMConfigFromPeriodNearest", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern SamplingConfigWrap AUTDSTMConfigFromPeriodNearest(Duration p, ushort n);

        [DllImport(__DllName, EntryPoint = "AUTDDatagramSynchronize", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern DatagramPtr AUTDDatagramSynchronize();

        [DllImport(__DllName, EntryPoint = "AUTDDcSysTimeNow", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern DcSysTime AUTDDcSysTimeNow();

        [DllImport(__DllName, EntryPoint = "AUTDGPIOOutputTypeNone", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern GPIOOutputTypeWrap AUTDGPIOOutputTypeNone();

        [DllImport(__DllName, EntryPoint = "AUTDGPIOOutputTypeBaseSignal", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern GPIOOutputTypeWrap AUTDGPIOOutputTypeBaseSignal();

        [DllImport(__DllName, EntryPoint = "AUTDGPIOOutputTypeThermo", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern GPIOOutputTypeWrap AUTDGPIOOutputTypeThermo();

        [DllImport(__DllName, EntryPoint = "AUTDGPIOOutputTypeForceFan", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern GPIOOutputTypeWrap AUTDGPIOOutputTypeForceFan();

        [DllImport(__DllName, EntryPoint = "AUTDGPIOOutputTypeSync", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern GPIOOutputTypeWrap AUTDGPIOOutputTypeSync();

        [DllImport(__DllName, EntryPoint = "AUTDGPIOOutputTypeModSegment", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern GPIOOutputTypeWrap AUTDGPIOOutputTypeModSegment();

        [DllImport(__DllName, EntryPoint = "AUTDGPIOOutputTypeModIdx", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern GPIOOutputTypeWrap AUTDGPIOOutputTypeModIdx(ushort value);

        [DllImport(__DllName, EntryPoint = "AUTDGPIOOutputTypeStmSegment", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern GPIOOutputTypeWrap AUTDGPIOOutputTypeStmSegment();

        [DllImport(__DllName, EntryPoint = "AUTDGPIOOutputTypeStmIdx", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern GPIOOutputTypeWrap AUTDGPIOOutputTypeStmIdx(ushort value);

        [DllImport(__DllName, EntryPoint = "AUTDGPIOOutputTypeIsStmMode", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern GPIOOutputTypeWrap AUTDGPIOOutputTypeIsStmMode();

        [DllImport(__DllName, EntryPoint = "AUTDGPIOOutputTypePwmOut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern GPIOOutputTypeWrap AUTDGPIOOutputTypePwmOut(TransducerPtr value);

        [DllImport(__DllName, EntryPoint = "AUTDGPIOOutputTypeDirect", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern GPIOOutputTypeWrap AUTDGPIOOutputTypeDirect([MarshalAs(UnmanagedType.U1)] bool value);

        [DllImport(__DllName, EntryPoint = "AUTDGPIOOutputTypeSysTimeEq", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern GPIOOutputTypeWrap AUTDGPIOOutputTypeSysTimeEq(DcSysTime sys_time);

        [DllImport(__DllName, EntryPoint = "AUTDLoopBehaviorInfinite", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern LoopBehavior AUTDLoopBehaviorInfinite();

        [DllImport(__DllName, EntryPoint = "AUTDLoopBehaviorFinite", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern LoopBehavior AUTDLoopBehaviorFinite(ushort v);

        [DllImport(__DllName, EntryPoint = "AUTDPhaseFromRad", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern byte AUTDPhaseFromRad(float value);

        [DllImport(__DllName, EntryPoint = "AUTDPhaseToRad", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float AUTDPhaseToRad(Phase value);

        [DllImport(__DllName, EntryPoint = "AUTDPulseWidth", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern ResultU16 AUTDPulseWidth(ushort value);

        [DllImport(__DllName, EntryPoint = "AUTDPulseWidthFromDuty", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern ResultU16 AUTDPulseWidthFromDuty(float duty);

        [DllImport(__DllName, EntryPoint = "AUTDSamplingConfigFromDivision", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern ResultSamplingConfig AUTDSamplingConfigFromDivision(ushort div);

        [DllImport(__DllName, EntryPoint = "AUTDSamplingConfigFromFreq", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern SamplingConfigWrap AUTDSamplingConfigFromFreq(float f);

        [DllImport(__DllName, EntryPoint = "AUTDSamplingConfigFromPeriod", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern SamplingConfigWrap AUTDSamplingConfigFromPeriod(Duration p);

        [DllImport(__DllName, EntryPoint = "AUTDSamplingConfigIntoNearest", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern SamplingConfigWrap AUTDSamplingConfigIntoNearest(SamplingConfigWrap config);

        [DllImport(__DllName, EntryPoint = "AUTDSamplingConfigDivision", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern ResultU16 AUTDSamplingConfigDivision(SamplingConfigWrap c);

        [DllImport(__DllName, EntryPoint = "AUTDSamplingConfigFreq", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern ResultF32 AUTDSamplingConfigFreq(SamplingConfigWrap c);

        [DllImport(__DllName, EntryPoint = "AUTDSamplingConfigPeriod", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern ResultDuration AUTDSamplingConfigPeriod(SamplingConfigWrap c);

        [DllImport(__DllName, EntryPoint = "AUTDSamplingConfigEq", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool AUTDSamplingConfigEq(SamplingConfigWrap a, SamplingConfigWrap b);

        [DllImport(__DllName, EntryPoint = "AUTDTransitionModeSyncIdx", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern TransitionModeWrap AUTDTransitionModeSyncIdx();

        [DllImport(__DllName, EntryPoint = "AUTDTransitionModeSysTime", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern TransitionModeWrap AUTDTransitionModeSysTime(DcSysTime sys_time);

        [DllImport(__DllName, EntryPoint = "AUTDTransitionModeGPIO", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern TransitionModeWrap AUTDTransitionModeGPIO(GPIOIn gpio);

        [DllImport(__DllName, EntryPoint = "AUTDTransitionModeExt", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern TransitionModeWrap AUTDTransitionModeExt();

        [DllImport(__DllName, EntryPoint = "AUTDTransitionModeImmediate", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern TransitionModeWrap AUTDTransitionModeImmediate();

        [DllImport(__DllName, EntryPoint = "AUTDTransitionModeNone", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern TransitionModeWrap AUTDTransitionModeNone();

        [DllImport(__DllName, EntryPoint = "AUTDGainBessel", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern GainPtr AUTDGainBessel(Point3 pos, Vector3 dir, Angle theta, BesselOption option);

        [DllImport(__DllName, EntryPoint = "AUTDGainBesselIsDefault", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool AUTDGainBesselIsDefault(BesselOption option);

        [DllImport(__DllName, EntryPoint = "AUTDGainCache", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern GainCachePtr AUTDGainCache(GainPtr g);

        [DllImport(__DllName, EntryPoint = "AUTDGainCacheClone", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern GainPtr AUTDGainCacheClone(GainCachePtr g);

        [DllImport(__DllName, EntryPoint = "AUTDGainCacheFree", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void AUTDGainCacheFree(GainCachePtr g);

        [DllImport(__DllName, EntryPoint = "AUTDGainCustom", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern GainPtr AUTDGainCustom(ConstPtr f, ConstPtr context, GeometryPtr geometry);

        [DllImport(__DllName, EntryPoint = "AUTDGainFocus", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern GainPtr AUTDGainFocus(Point3 pos, FocusOption option);

        [DllImport(__DllName, EntryPoint = "AUTDGainFocusIsDefault", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool AUTDGainFocusIsDefault(FocusOption option);

        [DllImport(__DllName, EntryPoint = "AUTDGainGroupCreateMap", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern GroupGainMapPtr AUTDGainGroupCreateMap(ushort* device_indices_ptr, ushort num_devices);

        [DllImport(__DllName, EntryPoint = "AUTDGainGroupMapSet", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern GroupGainMapPtr AUTDGainGroupMapSet(GroupGainMapPtr map, ushort dev_idx, int* map_data);

        [DllImport(__DllName, EntryPoint = "AUTDGainGroup", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern GainPtr AUTDGainGroup(GroupGainMapPtr map, int* keys_ptr, GainPtr* values_ptr, uint kv_len);

        [DllImport(__DllName, EntryPoint = "AUTDGainIntoDatagramWithSegment", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern DatagramPtr AUTDGainIntoDatagramWithSegment(GainPtr gain, Segment segment, TransitionModeWrap transition_mode);

        [DllImport(__DllName, EntryPoint = "AUTDGainIntoDatagram", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern DatagramPtr AUTDGainIntoDatagram(GainPtr gain);

        [DllImport(__DllName, EntryPoint = "AUTDGainNull", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern GainPtr AUTDGainNull();

        [DllImport(__DllName, EntryPoint = "AUTDGainPlane", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern GainPtr AUTDGainPlane(Vector3 n, PlaneOption option);

        [DllImport(__DllName, EntryPoint = "AUTDGainPlanelIsDefault", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool AUTDGainPlanelIsDefault(PlaneOption option);

        [DllImport(__DllName, EntryPoint = "AUTDGainUniform", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern GainPtr AUTDGainUniform(EmitIntensity intensity, Phase phase);

        [DllImport(__DllName, EntryPoint = "AUTDDevice", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern DevicePtr AUTDDevice(GeometryPtr geo, ushort dev_idx);

        [DllImport(__DllName, EntryPoint = "AUTDDeviceNumTransducers", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint AUTDDeviceNumTransducers(DevicePtr dev);

        [DllImport(__DllName, EntryPoint = "AUTDDeviceGetSoundSpeed", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float AUTDDeviceGetSoundSpeed(DevicePtr dev);

        [DllImport(__DllName, EntryPoint = "AUTDDeviceSetSoundSpeed", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void AUTDDeviceSetSoundSpeed(GeometryPtr geo, ushort dev_idx, float value);

        [DllImport(__DllName, EntryPoint = "AUTDDeviceSetSoundSpeedFromTemp", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void AUTDDeviceSetSoundSpeedFromTemp(GeometryPtr geo, ushort dev_idx, float temp, float k, float r, float m);

        [DllImport(__DllName, EntryPoint = "AUTDDeviceCenter", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern Point3 AUTDDeviceCenter(DevicePtr dev);

        [DllImport(__DllName, EntryPoint = "AUTDDeviceEnableSet", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void AUTDDeviceEnableSet(GeometryPtr geo, ushort dev_idx, [MarshalAs(UnmanagedType.U1)] bool value);

        [DllImport(__DllName, EntryPoint = "AUTDDeviceEnableGet", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool AUTDDeviceEnableGet(DevicePtr dev);

        [DllImport(__DllName, EntryPoint = "AUTDDeviceWavelength", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float AUTDDeviceWavelength(DevicePtr dev);

        [DllImport(__DllName, EntryPoint = "AUTDDeviceWavenumber", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float AUTDDeviceWavenumber(DevicePtr dev);

        [DllImport(__DllName, EntryPoint = "AUTDDeviceRotation", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern Quaternion AUTDDeviceRotation(DevicePtr dev);

        [DllImport(__DllName, EntryPoint = "AUTDDeviceDirectionX", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern Vector3 AUTDDeviceDirectionX(DevicePtr dev);

        [DllImport(__DllName, EntryPoint = "AUTDDeviceDirectionY", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern Vector3 AUTDDeviceDirectionY(DevicePtr dev);

        [DllImport(__DllName, EntryPoint = "AUTDDeviceDirectionAxial", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern Vector3 AUTDDeviceDirectionAxial(DevicePtr dev);

        [DllImport(__DllName, EntryPoint = "AUTDGeometry", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern GeometryPtr AUTDGeometry(ControllerPtr cnt);

        [DllImport(__DllName, EntryPoint = "AUTDGeometryNumDevices", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint AUTDGeometryNumDevices(GeometryPtr geo);

        [DllImport(__DllName, EntryPoint = "AUTDGeometryNumTransducers", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint AUTDGeometryNumTransducers(GeometryPtr geo);

        [DllImport(__DllName, EntryPoint = "AUTDGeometrCenter", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern Point3 AUTDGeometrCenter(GeometryPtr geo);

        [DllImport(__DllName, EntryPoint = "AUTDGeometryReconfigure", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void AUTDGeometryReconfigure(GeometryPtr geo, Point3* pos, Quaternion* rot);

        [DllImport(__DllName, EntryPoint = "AUTDRotationFromEulerXYZ", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern Quaternion AUTDRotationFromEulerXYZ(float x, float y, float z);

        [DllImport(__DllName, EntryPoint = "AUTDRotationFromEulerZYZ", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern Quaternion AUTDRotationFromEulerZYZ(float z1, float y, float z2);

        [DllImport(__DllName, EntryPoint = "AUTDTransducer", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern TransducerPtr AUTDTransducer(DevicePtr dev, byte idx);

        [DllImport(__DllName, EntryPoint = "AUTDTransducerPosition", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern Point3 AUTDTransducerPosition(TransducerPtr tr);

        [DllImport(__DllName, EntryPoint = "AUTDTracingInit", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void AUTDTracingInit();

        [DllImport(__DllName, EntryPoint = "AUTDTracingInitWithFile", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern ResultStatus AUTDTracingInitWithFile(byte* path);

        [DllImport(__DllName, EntryPoint = "AUTDLinkAudit", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern LinkPtr AUTDLinkAudit();

        [DllImport(__DllName, EntryPoint = "AUTDLinkAuditIsOpen", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool AUTDLinkAuditIsOpen(LinkPtr audit);

        [DllImport(__DllName, EntryPoint = "AUTDLinkAuditBreakDown", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void AUTDLinkAuditBreakDown(LinkPtr audit);

        [DllImport(__DllName, EntryPoint = "AUTDLinkAuditRepair", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void AUTDLinkAuditRepair(LinkPtr audit);

        [DllImport(__DllName, EntryPoint = "AUTDLinkAuditCpuNumTransducers", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint AUTDLinkAuditCpuNumTransducers(LinkPtr audit, ushort idx);

        [DllImport(__DllName, EntryPoint = "AUTDLinkAuditFpgaAssertThermalSensor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void AUTDLinkAuditFpgaAssertThermalSensor(LinkPtr audit, ushort idx);

        [DllImport(__DllName, EntryPoint = "AUTDLinkAuditFpgaDeassertThermalSensor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void AUTDLinkAuditFpgaDeassertThermalSensor(LinkPtr audit, ushort idx);

        [DllImport(__DllName, EntryPoint = "AUTDLinkAuditFpgaIsForceFan", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool AUTDLinkAuditFpgaIsForceFan(LinkPtr audit, ushort idx);

        [DllImport(__DllName, EntryPoint = "AUTDLinkAuditFpgaCurrentStmSegment", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern Segment AUTDLinkAuditFpgaCurrentStmSegment(LinkPtr audit, ushort idx);

        [DllImport(__DllName, EntryPoint = "AUTDLinkAuditFpgaCurrentModSegment", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern Segment AUTDLinkAuditFpgaCurrentModSegment(LinkPtr audit, ushort idx);

        [DllImport(__DllName, EntryPoint = "AUTDLinkAuditFpgaIsStmGainMode", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool AUTDLinkAuditFpgaIsStmGainMode(LinkPtr audit, Segment segment, ushort idx);

        [DllImport(__DllName, EntryPoint = "AUTDLinkAuditCpuSilencerStrictMode", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool AUTDLinkAuditCpuSilencerStrictMode(LinkPtr audit, ushort idx);

        [DllImport(__DllName, EntryPoint = "AUTDLinkAuditFpgaSilencerUpdateRateIntensity", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern ushort AUTDLinkAuditFpgaSilencerUpdateRateIntensity(LinkPtr audit, ushort idx);

        [DllImport(__DllName, EntryPoint = "AUTDLinkAuditFpgaSilencerUpdateRatePhase", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern ushort AUTDLinkAuditFpgaSilencerUpdateRatePhase(LinkPtr audit, ushort idx);

        [DllImport(__DllName, EntryPoint = "AUTDLinkAuditFpgaSilencerCompletionStepsIntensity", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern ushort AUTDLinkAuditFpgaSilencerCompletionStepsIntensity(LinkPtr audit, ushort idx);

        [DllImport(__DllName, EntryPoint = "AUTDLinkAuditFpgaSilencerCompletionStepsPhase", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern ushort AUTDLinkAuditFpgaSilencerCompletionStepsPhase(LinkPtr audit, ushort idx);

        [DllImport(__DllName, EntryPoint = "AUTDLinkAuditFpgaSilencerFixedCompletionStepsMode", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool AUTDLinkAuditFpgaSilencerFixedCompletionStepsMode(LinkPtr audit, ushort idx);

        [DllImport(__DllName, EntryPoint = "AUTDLinkAuditFpgaGPIOOutputTypes", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void AUTDLinkAuditFpgaGPIOOutputTypes(LinkPtr audit, ushort idx, byte* ty);

        [DllImport(__DllName, EntryPoint = "AUTDLinkAuditFpgaDebugValues", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void AUTDLinkAuditFpgaDebugValues(LinkPtr audit, ushort idx, ulong* value);

        [DllImport(__DllName, EntryPoint = "AUTDLinkAuditFpgaStmFreqDivision", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern ushort AUTDLinkAuditFpgaStmFreqDivision(LinkPtr audit, Segment segment, ushort idx);

        [DllImport(__DllName, EntryPoint = "AUTDLinkAuditFpgaStmCycle", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern ushort AUTDLinkAuditFpgaStmCycle(LinkPtr audit, Segment segment, ushort idx);

        [DllImport(__DllName, EntryPoint = "AUTDLinkAuditFpgaSoundSpeed", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern ushort AUTDLinkAuditFpgaSoundSpeed(LinkPtr audit, Segment segment, ushort idx);

        [DllImport(__DllName, EntryPoint = "AUTDLinkAuditFpgaStmLoopBehavior", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern LoopBehavior AUTDLinkAuditFpgaStmLoopBehavior(LinkPtr audit, Segment segment, ushort idx);

        [DllImport(__DllName, EntryPoint = "AUTDLinkAuditFpgaModulationFreqDivision", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern ushort AUTDLinkAuditFpgaModulationFreqDivision(LinkPtr audit, Segment segment, ushort idx);

        [DllImport(__DllName, EntryPoint = "AUTDLinkAuditFpgaModulationCycle", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern ushort AUTDLinkAuditFpgaModulationCycle(LinkPtr audit, Segment segment, ushort idx);

        [DllImport(__DllName, EntryPoint = "AUTDLinkAuditFpgaModulationBuffer", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void AUTDLinkAuditFpgaModulationBuffer(LinkPtr audit, Segment segment, ushort idx, byte* data, uint size);

        [DllImport(__DllName, EntryPoint = "AUTDLinkAuditFpgaModulationLoopBehavior", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern LoopBehavior AUTDLinkAuditFpgaModulationLoopBehavior(LinkPtr audit, Segment segment, ushort idx);

        [DllImport(__DllName, EntryPoint = "AUTDLinkAuditFpgaDrivesAt", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void AUTDLinkAuditFpgaDrivesAt(LinkPtr audit, Segment segment, ushort idx, ushort stm_idx, Drive* drive);

        [DllImport(__DllName, EntryPoint = "AUTDLinkAuditFpgaPulseWidthEncoderTable", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void AUTDLinkAuditFpgaPulseWidthEncoderTable(LinkPtr audit, ushort idx, ushort* dst);

        [DllImport(__DllName, EntryPoint = "AUTDLinkGet", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern LinkPtr AUTDLinkGet(ControllerPtr cnt);

        [DllImport(__DllName, EntryPoint = "AUTDLinkNop", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern LinkPtr AUTDLinkNop();

        [DllImport(__DllName, EntryPoint = "AUTDModulationCache", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern ModulationCachePtr AUTDModulationCache(ModulationPtr m);

        [DllImport(__DllName, EntryPoint = "AUTDModulationCacheClone", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern ModulationPtr AUTDModulationCacheClone(ModulationCachePtr m);

        [DllImport(__DllName, EntryPoint = "AUTDModulationCacheFree", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void AUTDModulationCacheFree(ModulationCachePtr m);

        [DllImport(__DllName, EntryPoint = "AUTDModulationCustom", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern ModulationPtr AUTDModulationCustom(byte* ptr, ushort len, SamplingConfigWrap sampling_config);

        [DllImport(__DllName, EntryPoint = "AUTDModulationWithFir", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern ModulationPtr AUTDModulationWithFir(ModulationPtr m, float* coef, uint n_tap);

        [DllImport(__DllName, EntryPoint = "AUTDModulationFourierExact", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern ModulationPtr AUTDModulationFourierExact(uint* sine_freq, SineOption* sine_option, uint size, FourierOption option);

        [DllImport(__DllName, EntryPoint = "AUTDModulationFourierExactFloat", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern ModulationPtr AUTDModulationFourierExactFloat(float* sine_freq, SineOption* sine_option, uint size, FourierOption option);

        [DllImport(__DllName, EntryPoint = "AUTDModulationFourierNearest", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern ModulationPtr AUTDModulationFourierNearest(float* sine_freq, SineOption* sine_option, uint size, FourierOption option);

        [DllImport(__DllName, EntryPoint = "AUTDModulationSamplingConfig", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern SamplingConfigWrap AUTDModulationSamplingConfig(ModulationPtr m);

        [DllImport(__DllName, EntryPoint = "AUTDModulationExpectedRadiationPressure", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern ResultF32 AUTDModulationExpectedRadiationPressure(ModulationPtr m);

        [DllImport(__DllName, EntryPoint = "AUTDModulationIntoDatagramWithSegment", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern DatagramPtr AUTDModulationIntoDatagramWithSegment(ModulationPtr m, Segment segment, TransitionModeWrap transition_mode);

        [DllImport(__DllName, EntryPoint = "AUTDModulationIntoDatagramWithLoopBehavior", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern DatagramPtr AUTDModulationIntoDatagramWithLoopBehavior(ModulationPtr m, Segment segment, TransitionModeWrap transition_mode, LoopBehavior loop_behavior);

        [DllImport(__DllName, EntryPoint = "AUTDModulationIntoDatagram", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern DatagramPtr AUTDModulationIntoDatagram(ModulationPtr m);

        [DllImport(__DllName, EntryPoint = "AUTDModulationWithRadiationPressure", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern ModulationPtr AUTDModulationWithRadiationPressure(ModulationPtr m);

        [DllImport(__DllName, EntryPoint = "AUTDModulationSineExact", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern ModulationPtr AUTDModulationSineExact(uint freq, SineOption option);

        [DllImport(__DllName, EntryPoint = "AUTDModulationSineExactFloat", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern ModulationPtr AUTDModulationSineExactFloat(float freq, SineOption option);

        [DllImport(__DllName, EntryPoint = "AUTDModulationSineNearest", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern ModulationPtr AUTDModulationSineNearest(float freq, SineOption option);

        [DllImport(__DllName, EntryPoint = "AUTDModulationSineIsDefault", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool AUTDModulationSineIsDefault(SineOption option);

        [DllImport(__DllName, EntryPoint = "AUTDModulationSquareExact", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern ModulationPtr AUTDModulationSquareExact(uint freq, SquareOption option);

        [DllImport(__DllName, EntryPoint = "AUTDModulationSquareExactFloat", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern ModulationPtr AUTDModulationSquareExactFloat(float freq, SquareOption option);

        [DllImport(__DllName, EntryPoint = "AUTDModulationSquareNearest", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern ModulationPtr AUTDModulationSquareNearest(float freq, SquareOption option);

        [DllImport(__DllName, EntryPoint = "AUTDModulationSquareIsDefault", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool AUTDModulationSquareIsDefault(SquareOption option);

        [DllImport(__DllName, EntryPoint = "AUTDModulationStatic", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern ModulationPtr AUTDModulationStatic(byte intensity);

        [DllImport(__DllName, EntryPoint = "AUTDModulationStaticIsDefault", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool AUTDModulationStaticIsDefault(byte intensity);

        [DllImport(__DllName, EntryPoint = "AUTDGetErr", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void AUTDGetErr(ConstPtr src, byte* dst);


    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct ResultController
    {
        public ControllerPtr result;
        public uint err_len;
        public ConstPtr err;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct FPGAStateListPtr
    {
        public IntPtr Item1;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct ResultFPGAStateList
    {
        public FPGAStateListPtr result;
        public uint err_len;
        public ConstPtr err;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct FirmwareVersionListPtr
    {
        public IntPtr Item1;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct ResultFirmwareVersionList
    {
        public FirmwareVersionListPtr result;
        public uint err_len;
        public ConstPtr err;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct SenderOption
    {
        public Duration send_interval;
        public Duration receive_interval;
        public OptionDuration timeout;
        public ParallelMode parallel;
        public SleeperWrap sleeper;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct FixedCompletionTime
    {
        public Duration intensity;
        public Duration phase;
        [MarshalAs(UnmanagedType.U1)] public bool strict_mode;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct GainCachePtr
    {
        public IntPtr Item1;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct GroupGainMapPtr
    {
        public IntPtr Item1;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct ModulationCachePtr
    {
        public IntPtr Item1;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct FourierOption
    {
        [MarshalAs(UnmanagedType.U1)] public bool has_scale_factor;
        public float scale_factor;
        [MarshalAs(UnmanagedType.U1)] public bool clamp;
        public byte offset;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct SineOption
    {
        public byte intensity;
        public byte offset;
        public Angle phase;
        [MarshalAs(UnmanagedType.U1)] public bool clamp;
        public ushort sampling_config_div;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct SquareOption
    {
        public byte low;
        public byte high;
        public float duty;
        public ushort sampling_config_div;
    }



}
