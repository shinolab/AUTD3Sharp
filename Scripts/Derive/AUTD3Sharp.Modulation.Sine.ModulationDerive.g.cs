// <auto-generated/>

#if UNITY_2020_2_OR_NEWER
#nullable enable
#endif

using System;
using System.Diagnostics.CodeAnalysis;
using AUTD3Sharp.Driver.Datagram;
using AUTD3Sharp.NativeMethods;

namespace AUTD3Sharp.Modulation {
    partial class Sine : AUTD3Sharp.Driver.Datagram.Modulation.IModulation, IDatagramS<ModulationPtr>, IDatagram
    {
        DatagramPtr IDatagram.Ptr(Geometry _) => NativeMethodsBase.AUTDModulationIntoDatagram(ModulationPtr());
        [ExcludeFromCodeCoverage] DatagramPtr IDatagramS<ModulationPtr>.IntoSegment(ModulationPtr p, Segment segment, bool updateSegment) => NativeMethodsBase.AUTDModulationIntoDatagramWithSegment(p, segment, updateSegment);
        [ExcludeFromCodeCoverage] ModulationPtr IDatagramS<ModulationPtr>.RawPtr(Geometry _) => ModulationPtr();
        [ExcludeFromCodeCoverage] ModulationPtr AUTD3Sharp.Driver.Datagram.Modulation.IModulation.ModulationPtr() => ModulationPtr();
        [ExcludeFromCodeCoverage] public DatagramWithSegment<Sine, ModulationPtr> WithSegment(Segment segment, bool updateSegment)
        {
            return new DatagramWithSegment<Sine, ModulationPtr>(this, segment, updateSegment);
        }

        private SamplingConfiguration _config = SamplingConfiguration.FromFrequency(4000);

        public SamplingConfiguration SamplingConfiguration => new SamplingConfiguration(NativeMethodsBase.AUTDModulationSamplingConfig(ModulationPtr()));

        public LoopBehavior LoopBehavior { get; private set; } = LoopBehavior.Infinite;

        public int Length => NativeMethodsBase.AUTDModulationSize(ModulationPtr()).Validate();

        [ExcludeFromCodeCoverage] SamplingConfiguration AUTD3Sharp.Driver.Datagram.Modulation.IModulation.InternalSamplingConfiguration() => _config;
        [ExcludeFromCodeCoverage] LoopBehavior AUTD3Sharp.Driver.Datagram.Modulation.IModulation.InternalLoopBehavior() => LoopBehavior; 

        /// <summary>
        /// Set loop behavior
        /// </summary>
        /// <param name="loopBehavior">loop behavior</param>
        /// <returns></returns>
        public Sine WithLoopBehavior(LoopBehavior loopBehavior)
        {
            LoopBehavior = loopBehavior;
            return this;
        }


              
        [ExcludeFromCodeCoverage] public AUTD3Sharp.Driver.Datagram.Modulation.Cache<Sine> WithCache()
        {
            return new AUTD3Sharp.Driver.Datagram.Modulation.Cache<Sine>(this);
        }

              
        public Sine WithSamplingConfig(SamplingConfiguration config)
        {
            _config = config;
            return this;
        }

              
        [ExcludeFromCodeCoverage] public AUTD3Sharp.Driver.Datagram.Modulation.RadiationPressure<Sine> WithRadiationPressure()
        {
            return new AUTD3Sharp.Driver.Datagram.Modulation.RadiationPressure<Sine>(this);
        }

              
        [ExcludeFromCodeCoverage] public AUTD3Sharp.Driver.Datagram.Modulation.Transform<Sine> WithTransform(Func<int, EmitIntensity, EmitIntensity> f)
        {
            return new AUTD3Sharp.Driver.Datagram.Modulation.Transform<Sine>(this, f);
        }

    }
}