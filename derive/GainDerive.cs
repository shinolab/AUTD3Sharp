using System.Text;
using Microsoft.CodeAnalysis;

namespace AUTD3Sharp.Derive;

[Generator(LanguageNames.CSharp)]
public partial class GainDeriveGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var source = context.SyntaxProvider.ForAttributeWithMetadataName(
            "AUTD3Sharp.Derive.GainAttribute",
            static (node, token) => true,
            static (context, token) => context);

        context.RegisterSourceOutput(source, Emit);
    }
    static void Emit(SourceProductionContext context, GeneratorAttributeSyntaxContext source)
    {
        var typeSymbol = (INamedTypeSymbol)source.TargetSymbol;
        var typeName = typeSymbol.ToDisplayString(SymbolDisplayFormat.MinimallyQualifiedFormat);

        var attribute = source.Attributes.First(attr => attr!.AttributeClass!.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat) ==
                                                        "global::AUTD3Sharp.Derive.GainAttribute");
        var namedArguments = attribute.NamedArguments;
        var noCache = namedArguments.Any(arg => arg.Key == "NoCache" && (bool)(arg.Value.Value ?? false));
        var noTransform = namedArguments.Any(arg => arg.Key == "NoTransform" && (bool)(arg.Value.Value ?? false));

        var ns = typeSymbol.ContainingNamespace.IsGlobalNamespace ? "" : $"namespace {typeSymbol.ContainingNamespace}";

        var cacheCode = noCache ? "" :
            $$"""
              
        public AUTD3Sharp.Driver.Datagram.Gain.Cache<{{typeName}}> WithCache()
        {
            return new AUTD3Sharp.Driver.Datagram.Gain.Cache<{{typeName}}>(this);
        }

""";
        var transformCode = noTransform ? "" :
            $$"""
              
        public AUTD3Sharp.Driver.Datagram.Gain.Transform<{{typeName}}> WithTransform(Func<AUTD3Sharp.Driver.Geometry.Device, AUTD3Sharp.Driver.Geometry.Transducer, AUTD3Sharp.Drive, AUTD3Sharp.Drive> f)
        {
            return new AUTD3Sharp.Driver.Datagram.Gain.Transform<{{typeName}}>(this, f);
        }

""";

        var fullType = typeSymbol.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat)
            .Replace("global::", "")
            .Replace("<", "_")
            .Replace(">", "_");
        var code = $$"""
// <auto-generated/>
#nullable enable

using System;

{{ns}} {
    public partial class {{typeName}}
    {
{{cacheCode}}
{{transformCode}}
    }
}
""";
        context.AddSource($"{fullType}.GainDerive.g.cs", code);
    }
}