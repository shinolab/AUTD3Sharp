using Microsoft.CodeAnalysis;

namespace AUTD3Sharp.Derive;

[Generator(LanguageNames.CSharp)]
public class PropertyGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var source = context.SyntaxProvider.ForAttributeWithMetadataName(
            "AUTD3Sharp.Derive.BuilderAttribute",
            static (_, _) => true,
            static (context, _) => context);

        context.RegisterSourceOutput(source, Emit);
    }

    private static void Emit(SourceProductionContext context, GeneratorAttributeSyntaxContext source)
    {
        var typeSymbol = (INamedTypeSymbol)source.TargetSymbol;
        var typeName = typeSymbol.ToDisplayString(SymbolDisplayFormat.MinimallyQualifiedFormat);

        var ns = typeSymbol.ContainingNamespace.IsGlobalNamespace ? "" : $"namespace {typeSymbol.ContainingNamespace}";

        var publicMembers = typeSymbol.GetMembers()
            .Where(x => x is (IFieldSymbol or IPropertySymbol)
                and
            {
                IsStatic: false, DeclaredAccessibility: Accessibility.Public, IsImplicitlyDeclared: false,
                CanBeReferencedByName: true
            });

        var setters = string.Join("\n", publicMembers.Select(publicMember =>
        {
            var attr = publicMember.GetAttributes().FirstOrDefault(attr =>
                attr?.AttributeClass?.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat) ==
                "global::AUTD3Sharp.Derive.PropertyAttribute");
            if (attr == null) return string.Empty;

            var name = publicMember.Name;
            var type = ((IPropertySymbol)publicMember).Type.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat);
            return attr.NamedArguments.Any(arg => arg.Key == "EmitIntensity" && (bool)(arg.Value.Value ?? false)) ? $$"""
                          public {{typeName}} With{{name}}({{type}} value)
                          {
                             {{name}} = value;
                             return this;
                          }
                  
                          [ExcludeFromCodeCoverage] public {{typeName}} With{{name}}(byte value)
                          {
                             {{name}} = new EmitIntensity(value);
                             return this;
                          }
                  """ : $$"""
                                  public {{typeName}} With{{name}}({{type}} value)
                                  {
                                      {{name}} = value;
                                      return this;
                                  }
                          """;
        }));

        var fullType = typeSymbol.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat)
            .Replace("global::", "")
            .Replace("<", "_")
            .Replace(">", "_");
        var code = $$"""
// <auto-generated/>

#if UNITY_2020_2_OR_NEWER
#nullable enable
#endif

using System;
using System.Diagnostics.CodeAnalysis;

{{ns}} {
    public partial class {{typeName}}
    {
        {{setters}}
    }   
}
""";
        context.AddSource($"{fullType}.Property.g.cs", code);
    }
}
