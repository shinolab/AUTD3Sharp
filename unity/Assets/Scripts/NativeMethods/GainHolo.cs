// <auto-generated>
// This code is generated by csbindgen.
// DON'T CHANGE THIS DIRECTLY.
// </auto-generated>
#pragma warning disable CS8500
#pragma warning disable CS8981
using System;
using System.Runtime.InteropServices;
using AUTD3Sharp.Utils;
using AUTD3Sharp.Link;


namespace AUTD3Sharp.NativeMethods
{
    internal static unsafe partial class NativeMethodsGainHolo
    {
        const string __DllName = "autd3capi_gain_holo";





        [DllImport(__DllName, EntryPoint = "AUTDGainHoloConstraintNormalize", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern EmissionConstraintWrap AUTDGainHoloConstraintNormalize();

        [DllImport(__DllName, EntryPoint = "AUTDGainHoloConstraintUniform", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern EmissionConstraintWrap AUTDGainHoloConstraintUniform(Intensity intensity);

        [DllImport(__DllName, EntryPoint = "AUTDGainHoloConstraintMultiply", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern EmissionConstraintWrap AUTDGainHoloConstraintMultiply(float v);

        [DllImport(__DllName, EntryPoint = "AUTDGainHoloConstraintClamp", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern EmissionConstraintWrap AUTDGainHoloConstraintClamp(Intensity min_v, Intensity max_v);

        [DllImport(__DllName, EntryPoint = "AUTDGainHoloGreedySphere", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern GainPtr AUTDGainHoloGreedySphere(Point3* points, float* amps, uint size, GreedyOption option);

        [DllImport(__DllName, EntryPoint = "AUTDGainHoloGreedyT4010A1", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern GainPtr AUTDGainHoloGreedyT4010A1(Point3* points, float* amps, uint size, GreedyOption option);

        [DllImport(__DllName, EntryPoint = "AUTDGainGreedyIsDefault", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool AUTDGainGreedyIsDefault(GreedyOption option);

        [DllImport(__DllName, EntryPoint = "AUTDGainHoloGSSphere", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern GainPtr AUTDGainHoloGSSphere(Point3* points, float* amps, uint size, GSOption option);

        [DllImport(__DllName, EntryPoint = "AUTDGainHoloGST4010A1", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern GainPtr AUTDGainHoloGST4010A1(Point3* points, float* amps, uint size, GSOption option);

        [DllImport(__DllName, EntryPoint = "AUTDGainGSIsDefault", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool AUTDGainGSIsDefault(GSOption option);

        [DllImport(__DllName, EntryPoint = "AUTDGainHoloGSPATSphere", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern GainPtr AUTDGainHoloGSPATSphere(Point3* points, float* amps, uint size, GSPATOption option);

        [DllImport(__DllName, EntryPoint = "AUTDGainHoloGSPATT4010A1", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern GainPtr AUTDGainHoloGSPATT4010A1(Point3* points, float* amps, uint size, GSPATOption option);

        [DllImport(__DllName, EntryPoint = "AUTDGainGSPATIsDefault", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool AUTDGainGSPATIsDefault(GSPATOption option);

        [DllImport(__DllName, EntryPoint = "AUTDGainHoloSPLToPascal", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float AUTDGainHoloSPLToPascal(float value);

        [DllImport(__DllName, EntryPoint = "AUTDGainHoloPascalToSPL", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float AUTDGainHoloPascalToSPL(float value);

        [DllImport(__DllName, EntryPoint = "AUTDGainHoloNaiveSphere", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern GainPtr AUTDGainHoloNaiveSphere(Point3* points, float* amps, uint size, NaiveOption option);

        [DllImport(__DllName, EntryPoint = "AUTDGainHoloNaiveT4010A1", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern GainPtr AUTDGainHoloNaiveT4010A1(Point3* points, float* amps, uint size, NaiveOption option);

        [DllImport(__DllName, EntryPoint = "AUTDGainNaiveIsDefault", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool AUTDGainNaiveIsDefault(NaiveOption option);


    }

    [StructLayout(LayoutKind.Explicit)]
    internal unsafe partial struct EmissionConstraintValue
    {
        [FieldOffset(0)]
        public Intensity @null;
        [FieldOffset(0)]
        public Intensity uniform;
        [FieldOffset(0)]
        public float multiply;
        [FieldOffset(0)]
        public fixed byte/* Intensity, this length is invalid so must keep pointer and can't edit from C# */ clamp[2];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct EmissionConstraintWrap
    {
        public EmissionConstraintTag tag;
        public EmissionConstraintValue value;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct GreedyOption
    {
        public EmissionConstraintWrap constraint;
        public byte phase_quantization_levels;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct GSOption
    {
        public EmissionConstraintWrap constraint;
        public uint repeat;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct GSPATOption
    {
        public EmissionConstraintWrap constraint;
        public uint repeat;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct NaiveOption
    {
        public EmissionConstraintWrap constraint;
    }


    internal enum EmissionConstraintTag : byte
    {
        Normalize = 1,
        Uniform = 2,
        Multiply = 3,
        Clamp = 4,
    }


}
