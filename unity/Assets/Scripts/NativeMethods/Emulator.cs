// <auto-generated>
// This code is generated by csbindgen.
// DON'T CHANGE THIS DIRECTLY.
// </auto-generated>
#pragma warning disable CS8500
#pragma warning disable CS8981
using System;
using System.Runtime.InteropServices;
using AUTD3Sharp.Utils;


namespace AUTD3Sharp.NativeMethods
{
    public static unsafe partial class NativeMethodsEmulator
    {
        const string __DllName = "autd3capi_emulator";



        [DllImport(__DllName, EntryPoint = "AUTDEmulator", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern EmulatorPtr AUTDEmulator(Vector3* pos, Quaternion* rot, ushort len);

        [DllImport(__DllName, EntryPoint = "AUTDEmulatorFree", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void AUTDEmulatorFree(EmulatorPtr emulator);

        [DllImport(__DllName, EntryPoint = "AUTDEmulatorGeometry", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern GeometryPtr AUTDEmulatorGeometry(EmulatorPtr emulator);

        [DllImport(__DllName, EntryPoint = "AUTDEmulatorWithParallelThreshold", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern EmulatorPtr AUTDEmulatorWithParallelThreshold(EmulatorPtr emulator, ushort parallel_threshold);

        [DllImport(__DllName, EntryPoint = "AUTDEmulatorWithSendInterval", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern EmulatorPtr AUTDEmulatorWithSendInterval(EmulatorPtr emulator, ulong interval_ns);

        [DllImport(__DllName, EntryPoint = "AUTDEmulatorWithReceiveInterval", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern EmulatorPtr AUTDEmulatorWithReceiveInterval(EmulatorPtr emulator, ulong interval_ns);

        [DllImport(__DllName, EntryPoint = "AUTDEmulatorWithTimerResolution", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern EmulatorPtr AUTDEmulatorWithTimerResolution(EmulatorPtr emulator, uint resolution);

        [DllImport(__DllName, EntryPoint = "AUTDEmulatorRecordFrom", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern FfiFuture AUTDEmulatorRecordFrom(EmulatorPtr emulator, ulong start_time, ConstPtr f);

        [DllImport(__DllName, EntryPoint = "AUTDEmulatorRecordFree", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void AUTDEmulatorRecordFree(RecordPtr record);

        [DllImport(__DllName, EntryPoint = "AUTDEmulatorWaitResultRecord", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ResultRecord AUTDEmulatorWaitResultRecord(HandlePtr handle, FfiFuture future);

        [DllImport(__DllName, EntryPoint = "AUTDEmulatorTickNs", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ResultEmualtorErr AUTDEmulatorTickNs(LinkPtr record, ulong tick_ns);

        [DllImport(__DllName, EntryPoint = "AUTDEmulatorRecordNumDevices", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ushort AUTDEmulatorRecordNumDevices(RecordPtr record);

        [DllImport(__DllName, EntryPoint = "AUTDEmulatorRecordNumTransducers", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte AUTDEmulatorRecordNumTransducers(RecordPtr record, ushort dev_idx);

        [DllImport(__DllName, EntryPoint = "AUTDEmulatorRecordDriveLen", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ulong AUTDEmulatorRecordDriveLen(RecordPtr record);

        [DllImport(__DllName, EntryPoint = "AUTDEmulatorRecordDriveTime", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void AUTDEmulatorRecordDriveTime(RecordPtr record, float* time);

        [DllImport(__DllName, EntryPoint = "AUTDEmulatorRecordDrivePulseWidth", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void AUTDEmulatorRecordDrivePulseWidth(RecordPtr record, ushort dev_idx, byte tr_idx, byte* pulsewidth);

        [DllImport(__DllName, EntryPoint = "AUTDEmulatorRecordDrivePhase", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void AUTDEmulatorRecordDrivePhase(RecordPtr record, ushort dev_idx, byte tr_idx, byte* pulsewidth);

        [DllImport(__DllName, EntryPoint = "AUTDEmulatorRecordOutputLen", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ulong AUTDEmulatorRecordOutputLen(RecordPtr record);

        [DllImport(__DllName, EntryPoint = "AUTDEmulatorRecordOutputTime", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void AUTDEmulatorRecordOutputTime(RecordPtr record, float* time);

        [DllImport(__DllName, EntryPoint = "AUTDEmulatorRecordOutputVoltage", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void AUTDEmulatorRecordOutputVoltage(RecordPtr record, ushort dev_idx, byte tr_idx, float* v);

        [DllImport(__DllName, EntryPoint = "AUTDEmulatorRecordOutputUltrasound", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void AUTDEmulatorRecordOutputUltrasound(RecordPtr record, ushort dev_idx, byte tr_idx, float* v);

        [DllImport(__DllName, EntryPoint = "AUTDEmulatorSoundField", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern LocalFfiFuture AUTDEmulatorSoundField(RecordPtr record, Range range, RecordOption option);

        [DllImport(__DllName, EntryPoint = "AUTDEmulatorWaitSoundField", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ResultSoundField AUTDEmulatorWaitSoundField(HandlePtr handle, LocalFfiFuture future);

        [DllImport(__DllName, EntryPoint = "AUTDEmulatorSoundFieldTimeLen", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ulong AUTDEmulatorSoundFieldTimeLen(SoundFieldPtr sound_field, ulong duration_ns);

        [DllImport(__DllName, EntryPoint = "AUTDEmulatorSoundFieldPointsLen", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ulong AUTDEmulatorSoundFieldPointsLen(SoundFieldPtr sound_field);

        [DllImport(__DllName, EntryPoint = "AUTDEmulatorSoundFieldGetX", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void AUTDEmulatorSoundFieldGetX(SoundFieldPtr sound_field, float* x);

        [DllImport(__DllName, EntryPoint = "AUTDEmulatorSoundFieldGetY", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void AUTDEmulatorSoundFieldGetY(SoundFieldPtr sound_field, float* y);

        [DllImport(__DllName, EntryPoint = "AUTDEmulatorSoundFieldGetZ", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void AUTDEmulatorSoundFieldGetZ(SoundFieldPtr sound_field, float* z);

        [DllImport(__DllName, EntryPoint = "AUTDEmulatorSoundFieldSkip", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern LocalFfiFuture AUTDEmulatorSoundFieldSkip(SoundFieldPtr sound_field, ulong duration_ns);

        [DllImport(__DllName, EntryPoint = "AUTDEmulatorSoundFieldNext", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern LocalFfiFuture AUTDEmulatorSoundFieldNext(SoundFieldPtr sound_field, ulong duration_ns, float* time, float** v);

        [DllImport(__DllName, EntryPoint = "AUTDEmulatorWaitResultEmualtorErr", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ResultEmualtorErr AUTDEmulatorWaitResultEmualtorErr(HandlePtr handle, LocalFfiFuture future);

        [DllImport(__DllName, EntryPoint = "AUTDEmulatorSoundFieldFree", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void AUTDEmulatorSoundFieldFree(SoundFieldPtr sound_field);


    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct RecordOption
    {
        public float sound_speed;
        public ulong time_step_ns;
        [MarshalAs(UnmanagedType.U1)] public bool print_progress;
        public ulong memory_limits_hint_mb;
        [MarshalAs(UnmanagedType.U1)] public bool gpu;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct EmulatorPtr
    {
        public IntPtr Item1;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct RecordPtr
    {
        public IntPtr Item1;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct SoundFieldPtr
    {
        public IntPtr Item1;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct Range
    {
        public float x_start;
        public float x_end;
        public float y_start;
        public float y_end;
        public float z_start;
        public float z_end;
        public float resolution;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct ResultRecord
    {
        public RecordPtr result;
        public uint err_len;
        public ConstPtr err;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct ResultEmualtorErr
    {
        public int result;
        public uint err_len;
        public ConstPtr err;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct ResultSoundField
    {
        public SoundFieldPtr result;
        public uint err_len;
        public ConstPtr err;
    }



}
    